<%- include('./partials/header'); %>
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Reporte de Ingresos</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    /* Contenedor para los gráficos */
    .chart-container {
      display: flex;
      justify-content: space-evenly;
      gap: 20px;
      padding: 20px;
      flex-wrap: wrap;
    }

    /* Estilo de cada gráfico */
    .chart-container canvas {
      max-width: 400px;
      height: 300px;
      flex: 1 1 350px;
    }
  </style>
</head>
<body>
  <h1>Reporte de Ingresos por Evento</h1>
  
  <!-- Contenedor para los gráficos -->
  <div class="chart-container">
    <!-- Gráfico de ingresos -->
    <div>
      <h2>Ingresos por Evento</h2>
      <canvas id="ingresosChart"></canvas>
    </div>
    
    <!-- Gráfico de inscripciones -->
    <div>
      <h2>Cantidad de Inscripciones</h2>
      <canvas id="inscripcionesChart"></canvas>
    </div>
  </div>

  <h2>Distribución de Inscripciones por Categoría</h2>
  <div class="chart-container">
    <canvas id="distribucionCategoriaChart"></canvas>
  </div>

  <h2>Distribución de Inscripciones por Distancia</h2>
  <div class="chart-container">
    <canvas id="distribucionDistanciaChart"></canvas>
  </div>

  <script>
    // Ingresos por evento
    const ingresosPorEvento = <%- ingresosPorEvento %>;

    // Preparar los datos para el gráfico de ingresos
    const labelsIngresos = ingresosPorEvento.map(evento => evento.nombre);
    const ingresos = ingresosPorEvento.map(evento => evento.ingresos);

    // Crear el gráfico de ingresos
    const ctxIngresos = document.getElementById('ingresosChart').getContext('2d');
    const ingresosChart = new Chart(ctxIngresos, {
      type: 'bar',
      data: {
        labels: labelsIngresos,
        datasets: [{
          label: 'Ingresos',
          data: ingresos,
          backgroundColor: 'rgba(75, 192, 192, 0.2)',
          borderColor: 'rgba(75, 192, 192, 1)',
          borderWidth: 1
        }]
      },
      options: {
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });

    // Cantidad de inscripciones por evento
    const inscripcionesPorEvento = <%- inscripcionesPorEvento %>;

    // Preparar los datos para el gráfico de inscripciones
    const labelsInscripciones = inscripcionesPorEvento.map(evento => evento.nombre);
    const inscripciones = inscripcionesPorEvento.map(evento => evento.inscripciones);

    // Crear el gráfico de inscripciones
    const ctxInscripciones = document.getElementById('inscripcionesChart').getContext('2d');
    const inscripcionesChart = new Chart(ctxInscripciones, {
      type: 'bar',
      data: {
        labels: labelsInscripciones,
        datasets: [{
          label: 'Cantidad de Inscripciones',
          data: inscripciones,
          backgroundColor: 'rgba(153, 102, 255, 0.2)',
          borderColor: 'rgba(153, 102, 255, 1)',
          borderWidth: 1
        }]
      },
      options: {
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });

    // Distribución de inscripciones por categoría
    const distribucionPorCategoria = <%- distribucionPorCategoria %>;

    // Preparar los datos para el gráfico de distribución por categoría
    const distribucionLabelsCategoria = distribucionPorCategoria.map(evento => evento.evento);
    const distribucionCategoria = distribucionPorCategoria.map(evento => Object.values(evento.distribucion));

    const ctxDistribucionCategoria = document.getElementById('distribucionCategoriaChart').getContext('2d');
    const distribucionCategoriaChart = new Chart(ctxDistribucionCategoria, {
      type: 'bar',
      data: {
        labels: distribucionLabelsCategoria,
        datasets: distribucionCategoria.map((distribucion, index) => ({
          label: distribucionLabelsCategoria[index],
          data: distribucion,
          backgroundColor: 'rgba(255, 159, 64, 0.2)',
          borderColor: 'rgba(255, 159, 64, 1)',
          borderWidth: 1
        }))
      },
      options: {
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });

    // Distribución de inscripciones por distancia
    const distribucionPorDistancia = <%- distribucionPorDistancia %>;

    // Preparar los datos para el gráfico de distribución por distancia
    const distribucionLabelsDistancia = distribucionPorDistancia.map(evento => evento.evento);
    const distribucionDistancia = distribucionPorDistancia.map(evento => Object.values(evento.distribucion));

    const ctxDistribucionDistancia = document.getElementById('distribucionDistanciaChart').getContext('2d');
    const distribucionDistanciaChart = new Chart(ctxDistribucionDistancia, {
      type: 'bar',
      data: {
        labels: distribucionLabelsDistancia,
        datasets: distribucionDistancia.map((distribucion, index) => ({
          label: distribucionLabelsDistancia[index],
          data: distribucion,
          backgroundColor: 'rgba(54, 162, 235, 0.2)',
          borderColor: 'rgba(54, 162, 235, 1)',
          borderWidth: 1
        }))
      },
      options: {
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });
  </script>
</body>
</html>
