// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//npx prisma migrate dev --name nombre_migracion
//npx prisma generate

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  nombre          String
  apellido        String
  fecha_nacimiento DateTime
  edad            Int
  email           String    @unique
  contrasena      String

  clubId          Int?
  club            Clubes?    @relation(fields: [clubId], references: [id])

  // Relaci칩n con Roles Generales
  rolGeneralId    Int
  rolGeneral      Roles      @relation(fields: [rolGeneralId], references: [id])

  inscripciones   Inscripcion[]
  resultados      Resultados[]
}

model Roles {
  id          Int      @id @default(autoincrement())
  nombre      String
  descripcion String

  usuarios    User[]
}

model Clubes {
  id         Int       @id @default(autoincrement())
  nombre     String
  puntajes   PuntajeClub[]   // Relaci칩n para los puntajes anuales

  usuarios   User[]
}

model PuntajeClub {
  id        Int     @id @default(autoincrement())
  clubId    Int
  anio      Int
  puntos    Int     // Puntaje acumulado del club en ese a침o

  club      Clubes  @relation(fields: [clubId], references: [id])

  @@unique([clubId, anio])  // Un puntaje por club por a침o
}

model Eventos {
  id          Int           @id @default(autoincrement())
  nombre      String        
  descripcion String?       
  fecha       DateTime      
  lugar       String        

  categorias  EventoCategoria[]
  distancias  EventoDistancia[]
  inscripciones Inscripcion[]
  resultados   Resultados[]
}

model Categoria {
  id           Int           @id @default(autoincrement())
  nombre       String        

  eventos      EventoCategoria[]
  inscripciones Inscripcion[]
}

model Distancia {
  id           Int           @id @default(autoincrement())
  nombre       String        
  precio       Int           @default(0)

  eventos      EventoDistancia[]
  inscripciones Inscripcion[]
}

model EventoCategoria {
  eventoId    Int
  categoriaId Int

  evento      Eventos   @relation(fields: [eventoId], references: [id])
  categoria   Categoria @relation(fields: [categoriaId], references: [id])

  @@id([eventoId, categoriaId])
}

model EventoDistancia {
  eventoId    Int
  distanciaId Int

  evento      Eventos   @relation(fields: [eventoId], references: [id])
  distancia   Distancia @relation(fields: [distanciaId], references: [id])

  @@id([eventoId, distanciaId])
}

model Inscripcion {
  id              Int       @id @default(autoincrement())  
  usuarioId       Int
  eventoId        Int
  distanciaId     Int
  categoriaId     Int
  numeroCorredor  Int?
  asistencia      Boolean?

  usuario         User      @relation(fields: [usuarioId], references: [id])
  evento          Eventos   @relation(fields: [eventoId], references: [id])
  distancia       Distancia @relation(fields: [distanciaId], references: [id])
  categoria       Categoria @relation(fields: [categoriaId], references: [id])

  fechaInscripcion DateTime @default(now())

  @@unique([usuarioId, eventoId])  
}

model Resultados {
  id             Int       @id @default(autoincrement())  
  usuarioId      Int
  eventoId       Int
  tiempo         Int       
  lugarGeneral   Int       
  lugarCategoria Int       
  puntaje        Int?      

  usuario        User      @relation(fields: [usuarioId], references: [id])
  evento         Eventos   @relation(fields: [eventoId], references: [id])

  @@unique([usuarioId, eventoId])
}