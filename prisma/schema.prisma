// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//npx prisma migrate dev --name nombre_migracion
//npx prisma generate
//Crear una nueva rama: git checkout -b nombre_de_rama.
//Añadir los cambios: git add ..
//Hacer commit: git commit -m "Mensaje".
//Empujar los cambios: git push origin nombre_de_rama.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Rol {
  id       Int       @id @default(autoincrement())
  nombre   String
  usuarios Usuario[]
}

model Usuario {
  id           Int       @id @default(autoincrement())
  nombre       String
  apellido     String
  fecha_nacimiento DateTime
  edad         Int
  telefono     String
  email        String    @unique
  password     String
  rolId        Int
  rol          Rol       @relation(fields: [rolId], references: [id])
  hijos        Usuario[] @relation("ApoderadoEstudiante")
  apoderado    Usuario?  @relation("ApoderadoEstudiante", fields: [apoderadoId], references: [id])
  apoderadoId  Int?

  asistencias         Asistencia[]
  notas               Nota[]
  comunicaciones      Comunicacion[]
  hojaDeVida          HojaDeVida?
  cursosAsignados     CursoAsignatura[] @relation("UsuarioAsignaturas")
  talleresInscritos   TallerInscrito[]
  cursoId   Int?
  curso     Curso? @relation(fields: [cursoId], references: [id])
}

model HojaDeVida {
  id                Int     @id @default(autoincrement())
  usuarioId         Int     @unique
  tipoSangre        String
  alergias          String?
  contactoEmergencia String
  documentosMedicos String?
  anotaciones       String?

  usuario Usuario @relation(fields: [usuarioId], references: [id])
}

model Curso {
  id          Int              @id @default(autoincrement())
  nombre      String
  nivel       String
  estudiantes Usuario[]
  asignaturas CursoAsignatura[]
  eventos     EventoCalendario[]
}

model Asignatura {
  id          Int              @id @default(autoincrement())
  nombre      String
  descripcion String
  cursos      CursoAsignatura[]
}

model CursoAsignatura {
  id            Int        @id @default(autoincrement())
  curso_id      Int
  asignatura_id Int
  docente_id    Int

  curso      Curso      @relation(fields: [curso_id], references: [id])
  asignatura Asignatura @relation(fields: [asignatura_id], references: [id])
  docente    Usuario    @relation("UsuarioAsignaturas", fields: [docente_id], references: [id])

  @@unique([curso_id, asignatura_id, docente_id])
  notas Nota[]

}

model Nota {
  id               Int     @id @default(autoincrement())
  usuarioId        Int
  cursoAsignaturaId Int
  valor            Float
  fecha            DateTime @default(now())

  usuario          Usuario         @relation(fields: [usuarioId], references: [id])
  cursoAsignatura  CursoAsignatura @relation(fields: [cursoAsignaturaId], references: [id])
}

model Asistencia {
  id         Int      @id @default(autoincrement())
  usuarioId  Int
  fecha      DateTime
  estado     String

  usuario Usuario @relation(fields: [usuarioId], references: [id])

  @@unique([usuarioId, fecha])
}

model Comunicacion {
  id         Int      @id @default(autoincrement())
  titulo     String
  mensaje    String
  fecha      DateTime @default(now())
  tipo       String   // citación, aviso, general
  archivoURL String?  // link o adjunto
  usuarioId  Int?

  usuario Usuario? @relation(fields: [usuarioId], references: [id])
}

model EventoCalendario {
  id        Int      @id @default(autoincrement())
  titulo    String
  fecha     DateTime
  tipo      String  // prueba, actividad, feriado
  clima     String?
  cursoId   Int?

  curso Curso? @relation(fields: [cursoId], references: [id])

}

model Taller {
  id        Int     @id @default(autoincrement())
  nombre    String
  cupos     Int
  horario   String
  profesor  String
  inscritos TallerInscrito[]
}

model TallerInscrito {
  id        Int     @id @default(autoincrement())
  tallerId  Int
  usuarioId Int

  taller   Taller  @relation(fields: [tallerId], references: [id])
  usuario  Usuario @relation(fields: [usuarioId], references: [id])

  @@unique([tallerId, usuarioId])
}

model Reporte {
  id         Int      @id @default(autoincrement())
  tipo       String   
  contenido  String   
  fecha      DateTime @default(now())
}