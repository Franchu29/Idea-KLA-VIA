// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//npx prisma migrate dev --name nombre_migracion
//npx prisma generate

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  nombre          String
  apellido        String
  fecha_nacimeinto DateTime
  edad            Int
  email           String    @unique
  contrasena      String

  // Relación con Roles Generales
  rolGeneralId    Int
  rolGeneral      Roles      @relation(fields: [rolGeneralId], references: [id])
  inscripciones   Inscripcion[]
  resultados      Resultados[]
}

model Roles {
  id          Int      @id @default(autoincrement())
  nombre      String
  descripcion String

  // Relación con Usuarios
  usuarios    User[]
}

model Eventos {
  id          Int           @id @default(autoincrement())
  nombre      String        // Nombre del evento (ej: "Maratón Ciudad")
  descripcion String?       // Descripción opcional del evento
  fecha       DateTime      // Fecha del evento
  lugar       String        // Lugar donde se realizará el evento (ej: "Parque Central")

  // Relación con Categorías y Distancias
  categorias  EventoCategoria[]
  distancias  EventoDistancia[]
  inscripciones   Inscripcion[]
  resultados   Resultados[]
}

model Categoria {
  id         Int           @id @default(autoincrement())
  nombre     String        // e.g., "15-20 años", "21-30 años"

  // Relación con Eventos
  eventos    EventoCategoria[]

  // Relación con Inscripciones
  inscripciones   Inscripcion[]
}

model Distancia {
  id         Int           @id @default(autoincrement())
  nombre     String        //"2 km", "5 km", "10 km"
  precio    Int           @default(0) // Precio de la inscripción 

  // Relación con Eventos
  eventos    EventoDistancia[]
  inscripciones   Inscripcion[]
}

// Tabla intermedia para la relación muchos a muchos entre Eventos y Categorías
model EventoCategoria {
  eventoId    Int
  categoriaId Int

  evento      Eventos   @relation(fields: [eventoId], references: [id])
  categoria   Categoria @relation(fields: [categoriaId], references: [id])

  @@id([eventoId, categoriaId])
}

// Tabla intermedia para la relación muchos a muchos entre Eventos y Distancias
model EventoDistancia {
  eventoId    Int
  distanciaId Int

  evento      Eventos   @relation(fields: [eventoId], references: [id])
  distancia   Distancia @relation(fields: [distanciaId], references: [id])

  @@id([eventoId, distanciaId])
}

model Inscripcion {
  id               Int      @id @default(autoincrement())  // ID único de inscripción
  usuarioId       Int
  eventoId        Int
  distanciaId     Int
  categoriaId     Int      // Relación con la tabla Categoria
  numeroCorredor  Int?     // Nuevo campo para el número de corredor

  usuario         User      @relation(fields: [usuarioId], references: [id])
  evento          Eventos   @relation(fields: [eventoId], references: [id])
  distancia       Distancia @relation(fields: [distanciaId], references: [id])
  categoria       Categoria @relation(fields: [categoriaId], references: [id])

  fechaInscripcion DateTime @default(now()) // Fecha de la inscripción

  @@unique([usuarioId, eventoId])  // Un usuario solo puede inscribirse una vez por evento
}

model Resultados {
  id             Int      @id @default(autoincrement()) // ID único del resultado
  usuarioId      Int
  eventoId       Int
  tiempo         Int      // Tiempo en segundos, puedes convertirlo a un formato de HH:MM:SS cuando sea necesario
  lugarGeneral   Int      // Lugar general entre todos los participantes del evento
  lugarCategoria Int      // Lugar dentro de su categoría
  puntaje        Int?     // Puntaje (solo aplica si es la categoría de 10km, por lo tanto es opcional)

  // Relaciones con Usuario y Evento
  usuario        User     @relation(fields: [usuarioId], references: [id])
  evento         Eventos  @relation(fields: [eventoId], references: [id])

  // Restricción para que un usuario no tenga más de un resultado por evento
  @@unique([usuarioId, eventoId])
}