// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//npx prisma migrate dev --name nombre_migracion
//npx prisma generate
//Crear una nueva rama: git checkout -b nombre_de_rama.
//Añadir los cambios: git add ..
//Hacer commit: git commit -m "Mensaje".
//Empujar los cambios: git push origin nombre_de_rama.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Colegio {
  id        Int                  @id @default(autoincrement())
  nombre    String
  direccion String?
  telefono  String?
  email     String?

  cursos    Curso[]
  talleres  Taller[]
  eventos   EventoCalendario[]
  estudiantes Estudiante[]
  docentes    Docente[]
}

model Usuario {
  id               Int                @id @default(autoincrement())
  nombre           String
  apellido         String
  fecha_nacimiento DateTime
  edad             Int
  telefono         String
  email            String             @unique
  password         String
  rolId            Int

  rol              Rol                @relation(fields: [rolId], references: [id])

  estudiante       Estudiante?
  docente          Docente?
  apoderado        Apoderado?

  talleresInscritos TallerInscrito[]
}

model Rol {
  id     Int      @id @default(autoincrement())
  nombre String
  usuarios Usuario[]
}

model Estudiante {
  id                 Int           @id @default(autoincrement())
  usuarioId          Int           @unique
  apoderadoId        Int?
  cursoId            Int?
  colegioId          Int

  // Relaciones
  usuario            Usuario       @relation(fields: [usuarioId], references: [id])
  apoderado          Apoderado?    @relation(fields: [apoderadoId], references: [id])
  curso              Curso?        @relation(fields: [cursoId], references: [id])
  hojaDeVida         HojaDeVida?   @relation()
  notas              Nota[]        // Added relation to Nota
  colegio     Colegio    @relation(fields: [colegioId], references: [id])
  eventos      EventoCalendario[]
}

model Docente {
  id         Int      @id @default(autoincrement())
  usuarioId  Int      @unique
  colegioId          Int

  usuario    Usuario  @relation(fields: [usuarioId], references: [id])
  asignaturas CursoAsignatura[]
  colegio     Colegio    @relation(fields: [colegioId], references: [id])
  eventos      EventoCalendario[]
}

model Apoderado {
  id           Int        @id @default(autoincrement())
  usuarioId    Int        @unique

  usuario      Usuario    @relation(fields: [usuarioId], references: [id])
  estudiantes  Estudiante[]  // Relación con varios estudiantes
}

model Curso {
  id          Int              @id @default(autoincrement())
  nombre      String
  nivel       String
  colegioId   Int

  colegio     Colegio          @relation(fields: [colegioId], references: [id])
  estudiantes Estudiante[]
  asignaturas CursoAsignatura[]
  eventos     EventoCalendario[]
}

model Asignatura {
  id         Int               @id @default(autoincrement())
  nombre     String
  descripcion String?
  cursos     CursoAsignatura[]
}

model CursoAsignatura {
  id           Int         @id @default(autoincrement())
  cursoId      Int
  asignaturaId Int
  docenteId    Int

  curso        Curso       @relation(fields: [cursoId], references: [id])
  asignatura   Asignatura  @relation(fields: [asignaturaId], references: [id])
  docente      Docente     @relation(fields: [docenteId], references: [id])

  notas        Nota[]
  horarios     HorarioClase[]
}

model Nota {
  id                 Int              @id @default(autoincrement())
  estudianteId       Int
  cursoAsignaturaId  Int
  valor              Float

  estudiante         Estudiante       @relation(fields: [estudianteId], references: [id])
  cursoAsignatura    CursoAsignatura @relation(fields: [cursoAsignaturaId], references: [id])
}

model Taller {
  id        Int             @id @default(autoincrement())
  nombre    String
  cupos     Int
  horario   String
  profesor  String
  colegioId Int

  colegio   Colegio         @relation(fields: [colegioId], references: [id])
  inscritos TallerInscrito[]
}

model TallerInscrito {
  id         Int      @id @default(autoincrement())
  usuarioId  Int
  tallerId   Int

  usuario    Usuario  @relation(fields: [usuarioId], references: [id])
  taller     Taller   @relation(fields: [tallerId], references: [id])
}

model EventoCalendario {
  id           Int       @id @default(autoincrement())
  titulo       String
  fecha        DateTime
  tipo         String
  cursoId      Int?
  colegioId    Int
  docenteId    Int?
  descripcion  String?  @db.Text
  estudianteId  Int? 

  curso        Curso?   @relation(fields: [cursoId], references: [id])
  colegio      Colegio  @relation(fields: [colegioId], references: [id])
  docente      Docente? @relation(fields: [docenteId], references: [id])
  estudiante    Estudiante? @relation(fields: [estudianteId], references: [id])
}

model HojaDeVida {
  id                Int        @id @default(autoincrement())
  estudianteId      Int        @unique

  observaciones     String?
  sanciones         String?
  reconocimientos   String?

  estudiante        Estudiante @relation(fields: [estudianteId], references: [id])
}
model HorarioClase {
  id               Int              @id @default(autoincrement())
  cursoAsignaturaId Int
  diaSemana        Int              
  horaInicio       String           
  horaFin          String           
  sala             String?

  cursoAsignatura  CursoAsignatura @relation(fields: [cursoAsignaturaId], references: [id])
}